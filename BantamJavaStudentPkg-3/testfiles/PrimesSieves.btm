/** A class for finding primes from 2 to n using the Sieve
  * of Eratosthenes algorithm.
  * */
class bantam.Main {
    // main() method
    void main() {
	// io object
	TextIO io = new TextIO();
	// Boolean array indicating which numbers are primes
	// (false means prime, true means non-prime)
	boolean[] primes = null;
	// n is the size of the vector, read from the user
	int n = 0;
	  
	// some error checking, n must be >= 2
	while (n < 2) {
	    // prompt the user for n and read it in
	    n = io.putString("Enter a number >= 2: ").getInt();
	    // if not >= 2, print error message
	    if (n < 2)
		io.putString("Error: input < 2\n");
	}

	// construct array with every entry set to false (prime)
	primes = new boolean[n+1];

	// loop from 2 to n checking if numbers are prime]
	int i = 2;
	while (i <= n) {
            // if ith element is false, then found a prime
            if (!primes[i]) {
		// print out prime (i.e., index of the array)
		io.putInt(i).putString("\n");
		// loop from 2*i to n, crossing off multiples of this
		// prime (i.e., setting elements in the array to true)
		int j = i * 2;
		while (j <= n) {
		    primes[j] = true;
		    j = j + i;
		}
            }

	    i = i + 1;
	}
    }
}


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Feb 21 18:52:09 EST 2017
//----------------------------------------------------

package bantam.parser;

import bantam.lexer.*;
import bantam.ast.*;
import bantam.util.ErrorHandler;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Tue Feb 21 18:52:09 EST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\007\000\002\005\011" +
    "\000\002\006\003\000\002\006\004\000\002\006\002\000" +
    "\002\010\012\000\002\010\014\000\002\011\004\000\002" +
    "\011\006\000\002\011\010\000\002\011\006\000\002\013" +
    "\004\000\002\013\006\000\002\016\004\000\002\017\007" +
    "\000\002\017\011\000\002\020\007\000\002\020\011\000" +
    "\002\021\007\000\002\022\010\000\002\022\013\000\002" +
    "\022\011\000\002\022\012\000\002\022\011\000\002\022" +
    "\012\000\002\022\012\000\002\023\004\000\002\024\004" +
    "\000\002\024\005\000\002\025\004\000\002\025\005\000" +
    "\002\014\003\000\002\014\004\000\002\014\002\000\002" +
    "\027\005\000\002\032\005\000\002\032\007\000\002\033" +
    "\010\000\002\033\012\000\002\040\003\000\002\041\003" +
    "\000\002\042\003\000\002\043\005\000\002\044\005\000" +
    "\002\046\005\000\002\045\005\000\002\047\005\000\002" +
    "\050\005\000\002\051\005\000\002\052\005\000\002\053" +
    "\005\000\002\054\005\000\002\055\005\000\002\056\005" +
    "\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\004\005\007\001\002\000\006\002\001\005" +
    "\007\001\002\000\004\002\023\001\002\000\006\002\uffff" +
    "\005\uffff\001\002\000\004\051\010\001\002\000\006\006" +
    "\012\042\011\001\002\000\004\043\ufff9\001\002\000\004" +
    "\051\013\001\002\000\004\042\014\001\002\000\004\043" +
    "\ufff9\001\002\000\004\043\017\001\002\000\004\043\ufffb" +
    "\001\002\000\006\002\ufffc\005\ufffc\001\002\000\004\043" +
    "\ufffa\001\002\000\004\043\022\001\002\000\006\002\ufffd" +
    "\005\ufffd\001\002\000\004\002\000\001\002\000\006\002" +
    "\ufffe\005\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\003\004\004\003\005\005\001\001\000" +
    "\004\005\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\020\007" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\014\007\015\001\001\000\004\007\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * @return the ErrorHandler for this Parser
     */
    public ErrorHandler getErrorHandler() { return action_obj.getErrorHandler(); }

    /** overrides done_parsing in inherited class, called when parsing finishes
      * either after accepting or because of errors
      * */
    public void done_parsing() {
	super.done_parsing();
	// if lexing and/or parsing errors then exit
	action_obj.getErrorHandler().checkErrors();
    }

    /** overrides syntax_error in inherited class and handles syntax errors 
      * @param curr current symbol from the bantam.lexer
      * */
    public void syntax_error(Symbol curr) {
	// get token value from the symbol
	Token t = (Token)curr.value;
	
	// get the error handler object
	ErrorHandler errorHandler = action_obj.getErrorHandler();

	// may want to modify and augment the code below for more
	// accurate error reporting
	errorHandler.register(errorHandler.PARSE_ERROR, action_obj.getCurrFilename(), 
			      action_obj.getCurrLineNum(), 
			      "unexpected input near '" + t.getLexeme() + "'");
    }

    /** override error_sync_size in inherited class and
      * change the minimum number of tokens to skip on an error from 3 to 2
      * @return minimum number of tokens to skip on an error
      * */
    protected int error_sync_size() {
	return 2;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
    /** object for error handling */
    private ErrorHandler errorHandler = new ErrorHandler();

    /* sets the error handler */
    public ErrorHandler getErrorHandler() {
	return errorHandler;
    }

    /* returns the current line number from the scanner */
    public int getCurrLineNum() {
	return ((Lexer)parser.getScanner()).getCurrLineNum();
    }

    /* returns the current file name from the scanner */
    public String getCurrFilename() {
	return ((Lexer)parser.getScanner()).getCurrFilename();
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logic_or ::= expr OR expr 
            {
              BinaryLogicExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryLogicOrExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*logic_or*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_and ::= expr AND expr 
            {
              BinaryLogicExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryLogicAndExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*logic_and*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comp_ne ::= expr NE expr 
            {
              BinaryCompExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryCompNeExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*comp_ne*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comp_lt ::= expr LT expr 
            {
              BinaryCompExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryCompLtExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*comp_lt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comp_leq ::= expr LEQ expr 
            {
              BinaryCompExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryCompLeqExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*comp_leq*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comp_gt ::= expr GT expr 
            {
              BinaryCompExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryCompGtExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*comp_gt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comp_geq ::= expr GEQ expr 
            {
              BinaryCompExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryCompGeqExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*comp_geq*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comp_eq ::= expr EQ expr 
            {
              BinaryCompExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryCompEqExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*comp_eq*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binary_arith_times ::= expr TIMES expr 
            {
              BinaryArithExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryArithTimesExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*binary_arith_times*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binary_arith_mod ::= expr MODULUS expr 
            {
              BinaryArithExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryArithModulusExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*binary_arith_mod*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binary_arith_plus ::= expr PLUS expr 
            {
              BinaryArithExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryArithPlusExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*binary_arith_plus*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binary_arith_minus ::= expr MINUS expr 
            {
              BinaryArithExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryArithMinusExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*binary_arith_minus*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binary_arith_div ::= expr DIVIDE expr 
            {
              BinaryArithExpr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new BinaryArithDivideExpr(getCurrLineNum(), e,e2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*binary_arith_div*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // const_string ::= STRING_CONST 
            {
              Expr RESULT = null;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstStringExpr(getCurrLineNum(), value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*const_string*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // const_bool ::= BOOLEAN_CONST 
            {
              Expr RESULT = null;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstBooleanExpr(getCurrLineNum(), value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*const_bool*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // const_int ::= INT_CONST 
            {
              Expr RESULT = null;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ConstIntExpr(getCurrLineNum(), value.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*const_int*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cast_expr ::= LPAREN ID LSQBRACE RSQBRACE RPAREN LPAREN expr RPAREN 
            {
              Expr RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CastExpr(getCurrLineNum(), type.getAttribute(), e ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*cast_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cast_expr ::= LPAREN ID RPAREN LPAREN expr RPAREN 
            {
              Expr RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CastExpr(getCurrLineNum(), type.getAttribute(), e ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*cast_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instance_of_expr ::= expr INSTANCEOF ID LSQBRACE RSQBRACE 
            {
              Expr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstanceofExpr(getCurrLineNum(), e, type.getAttribute() ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*instance_of_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instance_of_expr ::= expr INSTANCEOF ID 
            {
              Expr RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new InstanceofExpr(getCurrLineNum(), e, type.getAttribute() ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*instance_of_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_expr ::= var_expr ASSIGN expr 
            {
              Expr RESULT = null;
		VarExpr var = (VarExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new AssignExpr(getCurrLineNum(), null,var.getName(),e ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*assign_expr*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt_list ::= 
            {
              StmtList RESULT = null;
		 RESULT = new StmtList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*stmt_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT = null;
		StmtList st = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (StmtList)st.addElement(s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*stmt_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt_list ::= stmt 
            {
              StmtList RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (StmtList)(new StmtList(getCurrLineNum()).addElement(s)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*stmt_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block_stmt ::= LBRACE stmt_list RBRACE 
            {
              Stmt RESULT = null;
		StmtList st = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BlockStmt(getCurrLineNum(), st); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*block_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block_stmt ::= LBRACE RBRACE 
            {
              Stmt RESULT = null;
		 RESULT = new BlockStmt(getCurrLineNum(), null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*block_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT = null;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(getCurrLineNum(), e1); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*return_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_stmt ::= RETURN SEMI 
            {
              Stmt RESULT = null;
		 RESULT = new ReturnStmt(getCurrLineNum(), null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*return_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // break_stmt ::= BREAK SEMI 
            {
              Stmt RESULT = null;
		 RESULT = new BreakStmt(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*break_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for_stmt ::= FOR LPAREN expr SEMI expr SEMI RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), e1,e2,null, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_stmt ::= FOR LPAREN expr SEMI SEMI expr RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), e1,null,e3, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_stmt ::= FOR LPAREN expr SEMI SEMI RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), e1,null,null, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // for_stmt ::= FOR LPAREN SEMI expr SEMI expr RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), null,e2,e3, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // for_stmt ::= FOR LPAREN SEMI SEMI expr RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), null,null,e3, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for_stmt ::= FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), e1,e2,e3, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // for_stmt ::= FOR LPAREN SEMI SEMI RPAREN stmt 
            {
              Stmt RESULT = null;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ForStmt(getCurrLineNum(), null,null,null, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*for_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // while_stmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new WhileStmt(getCurrLineNum(), e, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*while_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Stmt RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IfStmt(getCurrLineNum(), e, s1, s2); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*if_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              Stmt RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IfStmt(getCurrLineNum(), e, s, null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*if_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_stmt ::= ID LSQBRACE RSQBRACE ID ASSIGN expr SEMI 
            {
              Stmt RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclStmt(getCurrLineNum(), type.getAttribute()+"[]",
                                               nam.getAttribute(), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*decl_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl_stmt ::= ID ID ASSIGN expr SEMI 
            {
              Stmt RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclStmt(getCurrLineNum(), type.getAttribute(),
                                       nam.getAttribute(), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*decl_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_stmt ::= expr SEMI 
            {
              Stmt RESULT = null;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ExprStmt(getCurrLineNum(), e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*expr_stmt*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= ID LSQBRACE RSQBRACE ID 
            {
              Formal RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Formal(getCurrLineNum(), type.getAttribute()+"[]",
                               nam.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*formal*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formal ::= ID ID 
            {
              Formal RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Formal(getCurrLineNum(), type.getAttribute(),
                               nam.getAttribute()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*formal*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // field ::= ID LSQBRACE RSQBRACE ID 
            {
              Field RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Field(getCurrLineNum(), type.getAttribute()+"[]",
                                 nam.getAttribute(), null ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*field*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // field ::= ID LSQBRACE RSQBRACE ID ASSIGN expr 
            {
              Field RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Field(getCurrLineNum(), type.getAttribute()+"[]",
                              nam.getAttribute(), exp ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*field*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field ::= ID ID ASSIGN expr 
            {
              Field RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Expr exp = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Field(getCurrLineNum(), type.getAttribute(),
                                  nam.getAttribute(), exp ); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*field*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= ID ID 
            {
              Field RESULT = null;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Field(getCurrLineNum(), type.getAttribute(),
                                  nam.getAttribute(), null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*field*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method ::= ID LSQBRACE RSQBRACE ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
            {
              Method RESULT = null;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Method(getCurrLineNum(), id.getAttribute() + "[]",
                                           nam.getAttribute(), fl, sl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*method*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method ::= ID ID LPAREN formal_list RPAREN LBRACE stmt_list RBRACE 
            {
              Method RESULT = null;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		StmtList sl = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Method(getCurrLineNum(), id.getAttribute(),
                                   nam.getAttribute(), fl, sl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*method*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // member_list ::= 
            {
              MemberList RESULT = null;
		 RESULT = new MemberList(getCurrLineNum()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*member_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // member_list ::= member_list member 
            {
              MemberList RESULT = null;
		MemberList ml = (MemberList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Member m = (Member)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (MemberList)ml.addElement(m); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*member_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // member_list ::= member 
            {
              MemberList RESULT = null;
		Member m = (Member)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (MemberList)(new MemberList(getCurrLineNum()).addElement(m)); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*member_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS ID EXTENDS ID LBRACE member_list RBRACE 
            {
              Class_ RESULT = null;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Token parent = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		MemberList ml = (MemberList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Class_(t.getLineNum(), getCurrFilename(), 
				   nam.getAttribute(),
				   parent.getAttribute(), ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS ID LBRACE member_list RBRACE 
            {
              Class_ RESULT = null;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Token nam = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		MemberList ml = (MemberList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Class_(t.getLineNum(), getCurrFilename(), 
				   nam.getAttribute(), "Object", ml); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              ClassList RESULT = null;
		ClassList cl = (ClassList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Class_ c = (Class_)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (ClassList)cl.addElement(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              ClassList RESULT = null;
		Class_ c = (Class_)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (ClassList)(new ClassList(0)).addElement(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              Program RESULT = null;
		ClassList cl = (ClassList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Program(0, cl); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

